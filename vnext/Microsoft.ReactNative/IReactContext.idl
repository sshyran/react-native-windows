// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IJSValueWriter.idl"; // The import is to be deprecated with IReactContext::DispatchEvent
import "IReactNotificationService.idl";
import "IReactPropertyBag.idl";

#ifndef CORE_ABI
#include "NamespaceRedirect.h" // The include is to be deprecated with IReactContext::DispatchEvent
#endif

#include "DocString.h"

namespace Microsoft.ReactNative {

#ifndef CORE_ABI
  [webhosthidden]
  interface IReactSettingsSnapshot {
    Boolean UseWebDebugger { get; };
    Boolean UseFastRefresh { get; };
    Boolean UseDirectDebugger { get; };
    Boolean DebuggerBreakOnNextLine { get; };
    UInt16 DebuggerPort { get; };
    String DebugBundlePath { get; };
    String BundleRootPath { get; };
    String SourceBundleHost { get; };
    UInt16 SourceBundlePort { get; };
    String JavaScriptBundleFile { get; };
  }
#endif

  [webhosthidden]
  DOC_STRING(
    "The `IReactContext` object is given to native modules to communicate with other native modules, views, application, and the React Native instance. \n"
    "It has the same lifetime as the React instance. When the React instance is reloaded or unloaded, the `IReactContext` is destroyed. \n"
    "- Use the Properties to share native module's data with other components. \n"
    "- Use the Notifications to exchange events with other components. \n"
    "- Use @.CallJSFunction to call JavaScript functions, and @.EmitJSEvent to raise JavaScript events. \n"
    "- Use @.UIDispatcher to schedule work in the UI thread. \n"
    "- Use @.JSDispatcher to schedule work in the JS thread.")
  interface IReactContext {
#ifndef CORE_ABI
    DOC_STRING("Get settings snapshot that were used to start the React instance.")
    IReactSettingsSnapshot SettingsSnapshot { get; };
#endif

    DOC_STRING("Properties shared with the @ReactInstanceSettings.Properties. It can be used to share values and state between components.")
    IReactPropertyBag Properties { get; };

    DOC_STRING(
      "Notifications shared with the @ReactInstanceSettings.Notifications. They can be used to exchange events between components. \n"
      "All subscriptions added to the `IReactContext.Notifications` are automatically removed after the `IReactContext` is destroyed. \n"
      "The subscriptions added to the `ReactInstanceSettings.Notifications` are kept as long as `ReactInstanceSettings` is alive.")
    IReactNotificationService Notifications { get; };

    DOC_STRING(
      "Get the UI thread dispatcher. \n"
      "It is a shortcut for the `ReactDispatcherHelper::UIDispatcherProperty` from the @.Properties property bag.")
    IReactDispatcher UIDispatcher { get; };

    DOC_STRING(
      "Get the JS thread dispatcher. \n"
      "It is a shortcut for the `ReactDispatcherHelper::JSDispatcherProperty` from the @.Properties property bag.")
    IReactDispatcher JSDispatcher { get; };

    DOC_STRING("Get the JavaScript runtime for the running React instance. It can be null if Web debugging is used.")
    Object JSRuntime { get; };

#ifndef CORE_ABI
    [deprecated("Use @XamlUIService.DispatchEvent instead", deprecate, 1)]
    void DispatchEvent(XAML_NAMESPACE.FrameworkElement view, String eventName, JSValueArgWriter eventDataArgWriter);
#endif

    DOC_STRING("Call the JavaScript function named `methodName` of `moduleName`.")
    void CallJSFunction(String moduleName, String methodName, JSValueArgWriter paramsArgWriter);

    DOC_STRING("Call JavaScript module event. It is a specialized `CallJSFunction` call where method name is always 'emit'.")
    void EmitJSEvent(String eventEmitterName, String eventName, JSValueArgWriter paramsArgWriter);
  }
} // namespace Microsoft.ReactNative
